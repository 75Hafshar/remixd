#!/usr/bin/env node
const { Router, services } = require('../src');
const program = require('commander')

let enabledServices = {}
const registerService = (name, service) => enabledServices[name] = service

program
.usage('[options]')
.description('Provide a two-way connection between the local computer and Remix IDE')
.option('--remix-ide  <url>', 'URL of remix instance allowed to connect to this web socket connection', 'https://remix.ethereum.org')
.option('-s, --shared-folder <path>', 'Folder to share with Remix IDE')
.option('--read-only', 'Treat shared folder as read-only (experimental)')
.option('--forward-commands', 'Enables CLI commands forwarding')
.on('--help', function() {
  console.log('\nExample:\n\n    remixd -s ./ --remix-ide http://localhost:8080\n')
}).parse(process.argv)

console.log('\x1b[33m%s\x1b[0m', '[WARN] You may now only use IDE at ' + program.remixIde + ' to connect to this instance')

if (program.sharedFolder) {
  console.log('\x1b[33m%s\x1b[0m', '[WARN] Any application that runs on your computer can potentially read from and write to all files in the directory.')
  console.log('\x1b[33m%s\x1b[0m', '[WARN] Symbolic links are not forwarded to Remix IDE\n')
  var sharedFolderService = services['sharedfolder'];
  sharedFolderService.sharedFolder(program.sharedFolder, program.readOnly || false);
  registerService('sharedfolder', sharedFolderService);
}

if (program.forwardCommands) {
  if (!program.sharedFolder) {
    console.log('Could not forward commands without specified shared folder (use --shared-folder <path> option)');
    return;
  }
  console.log('\x1b[33m%s\x1b[0m', '[WARN] You have enabled CLI commands forwarding. Use at your own risk.')
  var commandForwarderService = services['commandforwarder'];
  commandForwarderService.workingDirectory(program.sharedFolder);
  registerService('commandforwarder', commandForwarderService);
}

var router = new Router(65520, enabledServices, { remixIdeUrl: program.remixIde });
var cb = router.start()

process.on('SIGINT', function () {
  cb();
  process.exit();
});
process.on('SIGTERM', cb)
process.on('exit', cb)
